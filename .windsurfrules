- Unused Functions Retention : Only remove functions if they are completely unused and have been confirmed as such through thorough testing or documentation.


- Immediate Reason Check : Removal should only occur after identifying an immediate need, such as maintenance or restructuring. Avoid removal without a clear justification.

- Where necessary, Flag potential side effects before implementation


Before function removal/modification:
- Document exact current function behavior
- List ALL systems/processes using the function
- Explain precise reason for proposed change
- Provide alternative implementation strategy

- Comprehensive Testing Strategy: Ensuring both unit and integration testing are considered

- Dependency Management: Tracking and verifying affected dependencies

- Backwards Compatibility: Considering the impact of breaking changes

- Performance Considerations: Assessing performance implications upfront

- Error Handling: Ensuring robust error handling

- Documentation Requirements: Maintaining up-to-date documentation

- ensure that each important function whereever else deemed necessary, includes detailed comments about what the part of the code does, why it's necessary, the expected behavior when modifying the function, and any processes that use the function.